---
import Layout from '../../layouts/Layout.astro';

// ...interfaces...

export async function getStaticPaths() {
  return Array.from({length: 100}, (_, i) => ({
    params: { id: (i+1).toString() }
  }));
}

// Definici√≥n de interfaces con tipado estricto
interface Character {
  id: number;
  name: string;
  ki?: string;
  maxKi?: string;
  race?: string;
  gender?: string;
  description?: string;
  image?: string;
  affiliation?: string;
  avatar?: string;
  originplanet?: string;
  status?: string;
}

interface ApiError {
  message: string;
}

const API_URL = 'https://dragonball-api.com/api';


// Obtenemos el ID desde par√°metros y cualquier dato precargado
const { id } = Astro.params;
const { preloadedCharacter } = Astro.props as { preloadedCharacter?: Character };

// Si no tenemos datos precargados o son incompletos, hacemos fetch
let character: Character | null = preloadedCharacter || null;
let error: ApiError | null = null;

if (!preloadedCharacter) {
  try {
    console.log(`üîÑ Cargando personaje con ID ${id}...`);
    const res = await fetch(`${API_URL}/characters/${id}`);
    if (!res.ok) throw new Error(`Error HTTP: ${res.status}`);
    
    character = await res.json();
    console.log('‚úÖ Personaje cargado:', character);
  } catch (err) {
    console.error(`‚ùå Error al cargar personaje ${id}:`, err);
    if (err instanceof Error) {
      error = { message: err.message };
    } else {
      error = { message: 'Error desconocido' };
    }
  }
}

// Funci√≥n auxiliar con tipado fuerte
function safeGetString(obj: Character | null, key: keyof Character, defaultValue: string = ''): string {
  if (!obj) return defaultValue;
  const value = obj[key];
  return value !== undefined && value !== null ? String(value) : defaultValue;
}

// Obtener datos con seguridad de tipo
const characterName = safeGetString(character, 'name', 'Personaje desconocido');
const characterImage = safeGetString(character, 'image', 
                       safeGetString(character, 'avatar', '/favicon.svg'));
const characterRace = safeGetString(character, 'race', 
                      safeGetString(character, 'originplanet', 'Desconocido'));
const characterGender = safeGetString(character, 'gender', 'Desconocido');
const characterAffiliation = safeGetString(character, 'affiliation', 
                             safeGetString(character, 'status', 'Desconocido'));
const characterDescription = safeGetString(character, 'description', 'No hay descripci√≥n disponible.');
const characterKi = safeGetString(character, 'ki', 'Desconocido');
const characterMaxKi = safeGetString(character, 'maxKi', 'Desconocido');
---

<Layout title={characterName}>
  {character ? (
    <div class="max-w-3xl mx-auto p-4">
      <div class="bg-gray-800 rounded-xl p-6 shadow-lg text-center">
        <img 
          src={characterImage} 
          alt={characterName} 
          class="mx-auto mb-4 w-72 h-72 object-contain rounded-full border-4 border-yellow-500 shadow-lg" 
          onerror="this.onerror=null;this.src='/favicon.svg';"
        />
        <h1 class="text-3xl font-bold text-yellow-400">{characterName}</h1>
        
        <div class="flex justify-center gap-2 my-3 flex-wrap">
          <span class="text-xs bg-yellow-400 text-gray-900 px-2 py-1 rounded-full">
            {characterRace}
          </span>
          <span class="text-xs bg-blue-400 text-gray-900 px-2 py-1 rounded-full">
            {characterGender}
          </span>
          <span class="text-xs bg-green-400 text-gray-900 px-2 py-1 rounded-full">
            {characterAffiliation}
          </span>
        </div>
        
        <p class="mt-2 text-gray-300 italic mb-6">{characterDescription}</p>
        
        <div class="grid grid-cols-2 gap-4 text-left">
          <div class="bg-gray-700 p-3 rounded-lg">
            <p class="font-bold text-yellow-300">Ki:</p>
            <p>{characterKi}</p>
          </div>
          <div class="bg-gray-700 p-3 rounded-lg">
            <p class="font-bold text-yellow-300">Max Ki:</p>
            <p>{characterMaxKi}</p>
          </div>
          <div class="bg-gray-700 p-3 rounded-lg">
            <p class="font-bold text-yellow-300">Raza:</p>
            <p>{characterRace}</p>
          </div>
          <div class="bg-gray-700 p-3 rounded-lg">
            <p class="font-bold text-yellow-300">G√©nero:</p>
            <p>{characterGender}</p>
          </div>
        </div>
        
        <a href="/" class="inline-block mt-6 bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded transition">
          Volver a la lista
        </a>
      </div>
    </div>
  ) : (
    <div class="text-center mt-10 p-6">
      <p class="text-red-500 text-xl">No se pudo encontrar el personaje con ID: {id}</p>
      {error && <p class="text-gray-400 mt-2">{error.message}</p>}
      <a href="/" class="inline-block mt-4 bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded transition">
        Volver a la lista
      </a>
    </div>
  )}
</Layout>